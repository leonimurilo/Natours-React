--------------------------- Cascade and Specificity ---------------------------
Cascade:
Process of combining different stylesheets and resolving conflicts
between different css rules and declarations, when more than one rule applies
to a certain element.

It decides which declaration applies to a certain element.
It uses the following items to decide:

Importance -> Specificity -> Source order

Importance:
CSS can come from different sources. These declarations are:h
- Author (developer declarations)
- User (for instance, user changes default font size of the browser)
- Browser (user agent/Default browser declarations)

Specificity:
1) Inline styles
2) IDs
3) Classes/Pseudo-classes/attributes
4) Elements/Pseudo-elements

Source order:
The last stylesheet declaration overrides the previous stylesheets declarations

----------------------------- Css value processing -----------------------------

- Each property has an initial value, used if nothing is declared (and if there is no inheritance)
- Browsers specify a root font-size for each page (Comes from user's declarations)
- Percentages and relative values are always converted to pixels
- Percentages are measured relative to their parent's font-size when used to specify font-sizes
- Percentages are measured relative to their parent's width if used to specify lengths (including height. There are exceptions like font-height and more)
- "em" are measured relative to their parent font-size, if used to specify font-size
- "em" are measured relative to their current element font-size, if used to specify lengths
- "rem" are always measured relative to the document's root font-size
- "vh" and "vw" are percentage measurements of the viewport's height and width

--------------------------------- Inheritance ---------------------------------
It's the mechanism that allows certain properties to be passed from parent to child elements

- Inheritance passes the values for some specific properties from parents to children (more maintainable code)
- Properties related to text are inherited (font-family, font-size, color...)
- The computed value of a property is what gets inherited, not the declared value
- Inheritance of a property only works if no one declares a value for that property
- The "inherit" keyword can be used to force inheritance on a certain property
- The "initial" keyword can be used to reset a property to its initial value

--------------------------- Visual formatting model ---------------------------

Algorithm that calculates boxes and determines the layout of these boxes, for Each
element in the render tree, in order to determine the final layout of the page.

1) Box model
box-sizing: border-box includes the element's padding as part of its length

2) Box Types:
+ Block level boxes (block, flex, list-item and table)
  + Elements formatted visually as blocks
  + 100% of parent's width
  + Vertically one after another
  + default Box-model
+ Inline boxes (inline)
  + Content is distributed in lines
  + Occupies only content's space
  + no line breaks
  + no heights and widths
  + Paddings and margins are only horizontal
+ Inline-block
  + Same as Inline blocks but with the default Box-model

3) Positioning schemes:
+ Normal flow
+ Floats
+ Absolute Positioning

4) Stacking contexts
Properties like z-index define "layers" for the layout to be rendered.
the z-index property is not the only one which create new stacking contexts.
For example, an opacity value different from one, a transform, a filter or
other properties also create new stacking contexts.

--------------------- How to think when building css code ---------------------

Best strategy: Think -> Build -> Architect

------------------------------------- Sass -------------------------------------
+ Nesting
  + "&" is a shortcut for the current selector
+ Variables (reuse)
+ Built-in functions like the color function "darken" that,
 given a color and a percentage, generates a darker version of the given color.
+ Functions
  @function last($list)
    @return nth($list, length($list))
+ Mixins: A reusable piece of code that can be included in any sass file/selector:
  @mixin myMixin($color)
    content: ""
    clear: both
    display: table
    color: $color

  elem1
    @include myMixin(#fff)
  elem2
    @include myMixin(#45f)
+ Extends: Very close to a mixin, but instead of copying its properties,
it put many selectors pointing to the same group of properties

------------------------- Responsive design principles -------------------------

1) Fluid grids and layouts:
  To allow content to easily adapt to the current viewport width used to browse
  the website. Uses % rather than px for all layout-related lengths

2) Flexible/responsive images:
  Images behave differently than text content, and so we need to ensure that
  they also adapt nicely to the current viewport

3) Media queries
  To change styles on certain viewport widths (breakpoints), allowing us to
  create different version of our website for different widths

# 3 Major ways of layout a webpage or app (olderst to newest)
  1) Float layouts (bunch of boxes side by side using float)
  2) Flexbox (great for 1 dimension row)
  3) CSS Grid (perfect for 2 dimensions grid)
